y[2]=-1
y
x[3] + y[4]
cos(x[3])+sin(x[2])*exp(-y[2])
z=y[x+1]
z
A = matrix(1:4,nrow=2,ncol=2)
A
B = matrix(1:4,nrow=2,ncol=2,byrow=TRUE)
B
rbind(1:3,4:6)
cbind(1:3,4:6)
A+1
A*B
A[2,1]
A[1,]
1[,2]
A[,2]
myDf = data.frame(var1=1:2,var2=3:4)
myDf
names(myDf = c("newname1","newname2"))
names(myDf) = c("newname1","newname2"))
names(myDf) = c("newname1","newname2")
myDf
myDf$newname1
myDf$myNewVariable = c(0,1)
mmyDf
myDf
myList = list(vec = vec, A=A,myDf=myDf)
vec=c(-4.12,-1,1.1,1,3,4)
vec
myList = list(vec = vec, A=A,myDf=myDf)
myList$vec
myList$A
myList$myDf
str(myList)
str(myDf)
names(myList)
x = rnorm(100)
y=rnorm(100)
plot(x,y)
plot(x,y,xlab="this is the x-axis")
plot(x,y,xlab="this is the x-axis",ylab = "this is the y-axis")
plot(x,y,xlab="this is the x-axis",ylab = "this is the y-axis",main = "Plot of X vs Y")
rnorm(n=10,mean=0,sd=1
)
set.seed(45678)
rnorm(n=10,mean=0,sd=1)
rnorm(n=10,mean=0,sd=1)
set.seed(45678)
rnorm(n=10,mean=0,sd=1)
x= seq(-4,4,l=100)
x
y = dnorm(x=x,mean=0,sd=1)
plot(x,y,type="l")
qf(p=0.90,df1=1,df2=5)
qf(p=0.95,df1=1,df2=5)
qf(p=0.99,df1=1,df2=5)
qf(p=0.90,df1=1,df2=5)
rpois(100,lambda=5)
dt(-4:4,df=1)
x=seq(-4,4)
y=dt(x=x,df=1)
plot(x,y)
plot(x,y,type="l")
plot(x,y)
x=seq(-4,4,l=100)
y=dt(x=x,df=1)
plot(x,y,type="l")
plot(x,y)
plot(x,y,type="l")
x1=seq(-4,4,l=100)
y1=dt(x=x1,df=1)
plot(x1,y1,type="l")
y2=dt(x=x1,df=5)
lines(x1,y2)
lines(x1,y2,col="green")
lines(x1,y4,col="blue")
x1=seq(-4,4,l=100)
y1=dt(x=x1,df=1)
plot(x1,y1,type="l")
y2=dt(x=x1,df=5)
y3=dt(x=x1,df=10)
y4=dt(x=x1,df=50)
y5=dt(x=x1,df=100)
lines(x1,y2,col="green")
lines(x1,y3,col="red")
lines(x1,y4,col="blue")
lines(x1,y5,col="yellow")
getwd()
Auto = read.table("Auto.data",header=T,na.strings="?")
Auto
dim(Auto)
nrow(Auto)
ncol(Auto)
Auto[1:4,]
names(Auto)
load("EU.RData"")
load("EU.RData")
mod = lm(formula = Seats2011 ~ Population2010, data = EU)
mod
names(mod)
mod$coefficients
mod$residuals
mod$fitted.values
sumMod = summary(mod)
sumMod
load("EU.RData")
myModel = lm(formula = CamCom2011 ~ Population2010, data=EU)
myModel$residuals
myModel$coefficients
summaryMyModel = summary(myModel)
summaryMyModel$sigma
install.packages("MASS")
library(MASS)
dim(Boston)
train = 1:400
test = -train
test
variables = which(names(Boston) ==c("lstat","medv"))
variables*
variables
training_data = Boston[train,variables]
testing_data = Boston[test,variables]
dim(training_data)
plot(training_data$lstat,training_data$medv)
plot(training_data$lstat, training_data$medv,main = "Plot of lstat vs medv",xlab = "lstat",ylab = "medv")
plot(training_data$lstat, training_data$medv,main = "Plot of lstat vs medv",xlab = "lstat",ylab = "medv",type="o",col="red",size=3)
plot(training_data$lstat, training_data$medv,main = "Plot of lstat vs medv",xlab = "lstat",ylab = "medv",type="o",col="red")
plot(training_data$lstat, training_data$medv,main = "Plot of lstat vs medv",xlab = "lstat",ylab = "medv",col="red")
plot(training_data$lstat, training_data$medv,main = "Plot of lstat vs medv",xlab = "lstat",ylab = "medv",pch=2,col="red")
plot(training_data$lstat, training_data$medv,main = "Plot of lstat vs medv",xlab = "lstat",ylab = "medv",pch=2,col="red",cex=0.5)
plot(log(training_data$lstat),training_data$medv)
model = lm(medv ~ log(lstat),data=training_data)
model
summary(model)
#With all these informations we can assume that the slope is very different from 0
#Furthermore, the p-value is inferior to 0.05 (p-value = -25.9) which means that
#there is a significant relationship between the percentage of households with low socioeconomic income
#and the median house value.
#This relationship is negative. That is as the percantage of household with low socioeconomic income increases,
#the median house value decreases.
#Looking at  R2, we can deduce that  62.7% of the model variation is being explained by the predictor log(lstat).
names(model)
model$coefficients
confint(model,level=0.95)
#So, a  95% confidence interval for the slope of log(lstat) is (−13.13,−11.28).
plot(log(training_data$lstat),training_data$medv)
abline(model)
#So, a  95% confidence interval for the slope of log(lstat) is (−13.13,−11.28).
plot(log(training_data$lstat),training_data$medv,
xlab = "Log Transform of % of Houshold wit Low Socioeconomic Income",
ylab = "Median House Value",
col="red",
pch=20)
abline(model,col="blue",lwd=3)
abline(model,col="blue",lwd=10)
abline(model,col="blue",lwd=3)
lwd
#So, a  95% confidence interval for the slope of log(lstat) is (−13.13,−11.28).
plot(log(training_data$lstat),training_data$medv,
xlab = "Log Transform of % of Houshold wit Low Socioeconomic Income",
ylab = "Median House Value",
col="red",
pch=20)
abline(model,col="blue",lwd=3)
predict(model,data.frame(lstat=c(5)))
#Median value of the house with lstat = 5% is 32.1
predict(model, data.frame(lstat = c(5,10,15), interval="prediction"))
#Median values of houses with lstat = 5%, 10%, 15% are 32.1, 23.7, 18.7
y = testing_data$medv
y_hat = predict(model, data.frame(lstat=testing_data$lstat))
error = y-y_hat
error_squared=error^2
MSE=mean(error_squared)
MSE
plot(Boston$medv,Boston$age) #-0.37 : no linear relashionship between the two variables
#Question 1
library(MASS)
dim(Boston)
#Question 2
train = 1:400
test = -train
variables = which(names(Boston) ==c("lstat", "medv"))
training_set = Boston[train, variables]
testing_set = Boston[test, variables]
#Question 3
plot(Boston$medv,Boston$age) #-0.37 : no linear relashionship between the two variables
plot(Boston$age,Boston$medv) #-0.37 : no linear relashionship between the two variables
dataset = read_csv("Social_Network_Ads.csv")
dataset = read_csv2("Social_Network_Ads.csv")
dataset = load("Social_Network_Ads.csv")
setwd("C:\Users\33610\Documents\ESILV\A4\Machine Learning\PW2")
getwd()
setwd("C:/Users/33610/Documents/ESILV/A4/Machine Learning/PW2")
dataset = load("Social_Network_Ads.csv")
dataset = read.csv("Social_Network_Ads.csv")
View(dataset)
View(dataset)
dataset = read.csv("Social_Network_Ads.csv")
str(dataset)
summary(dataset)
plot(Age, EstimatedSalary, data=dataset)
plot(dataset$Age, dataset$EstimatedSalary)
plot(dataset$Age, dataset$Purchased)
plot(dataset$EstimatedSalary, dataset$Purchased)
plot(dataset$Age, dataset$Purchased)
pie(dataset$Gender, labels=dataset$Gender)
library(caTools)
package.install(caTools)
packages.install(caTools)
install(caTools)
install.packages(caTools)
install.packages(bitops)
install.packages("MASS")
install.packages("MASS")
install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split = TRUE)
test_set = subset(dataset, split = FALSE)
View(Auto)
dataset = read.csv("Social_Network_Ads.csv")
str(dataset)
summary(dataset)
plot(dataset$EstimatedSalary, dataset$Purchased)
plot(dataset$Age, dataset$Purchased)
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split = TRUE)
test_set = subset(dataset, split = FALSE)
# 4.
# 4.
training_set[c(3,4)] = scale(training_set[c(3,4)])
test_set[c(3,4)] = scale(test_set[c(3,4)])
View(test_set)
View(dataset)
View(dataset)
View(training_set)
View(training_set)
model = glm(Purchased ~ Age, family=binomial, data = training_set)
summary(model)
AIC(model, k=2)
AIC(model)
plot(dataset$Age, dataset$Purchased, xlab = "Age", ylab = "Purchased probability")
x = seq(18,60,l=200)
y = exp(-(model$coefficients[1] + model$coefficients[2] * x))
y = 1 / (1+y)
lines(x,y,col=2, lwd=2)
plot(dataset$Age, dataset$Purchased, xlab = "Age", ylab = "Purchased probability")
curve(model)
library(ggplot2)
ggplot(training_set, aes(x=Age, y=Purchased)) +
geom_point() +
stat_smooth(method="glm", method.args=list(family="binomial"), se=FALSE)
plot(dataset$Age, dataset$Purchased, xlab = "Age", ylab = "Purchased")
eq = function(X){exp(-0.9292 + 1.9807 * X)/(1 + exp(-0.9292 + 1.9807 * X))}
> plot(eq(1:1000), type='l')
curve(eq, add=TRUE)
plot(dataset$Age, dataset$Purchased, xlab = "Age", ylab = "Purchased")
eq = function(X){exp(-0.9292 + 1.9807 * X)/(1 + exp(-0.9292 + 1.9807 * X))}
plot(eq(1:1000), type='l')
curve(eq, add=TRUE)
plot(dataset$Age, dataset$Purchased, xlab = "Age", ylab = "Purchased")
eq = function(X){exp(-0.9292 + 1.9807 * X)/(1 + exp(-0.9292 + 1.9807 * X))}
#plot(eq(1:1000), type='l')
curve(eq, add=TRUE)
plot(eq(1:1000), type='l')
curve(eq, add=TRUE)
plot(eq(18:60), type='l')
curve(eq, add=TRUE)
plot(dataset$Age, dataset$Purchased, xlab = "Age", ylab = "Purchased")
eq = function(X){exp(-0.9292 + 1.9807 * X)/(1 + exp(-0.9292 + 1.9807 * X))}
#plot(eq(18:60), type='l')
curve(eq, add=TRUE)
plot(dataset$Age, dataset$Purchased, xlab = "Age", ylab = "Purchased")
predict = predict(model, type=response)
curve(predict,add=TRUE)
plot(dataset$Age, dataset$Purchased, xlab = "Age", ylab = "Purchased")
predict = predict(model, type="response")
curve(predict,add=TRUE)
plot(dataset$Age, dataset$Purchased, xlab = "Age", ylab = "Purchased")
predict = predict(model, type="response", data.frame(balance=training_set$Age))
predict = predict(model, type="response")
curve(predict,add=TRUE)
plot(dataset$Age, dataset$Purchased, xlab = "Age", ylab = "Purchased")
pred = predict(model, type="response")
curve(pred,add=TRUE)
plot(dataset$Age, dataset$Purchased, xlab = "Age", ylab = "Purchased")
curve(predict(model, type="response"),add=TRUE)
plot(dataset$Age, dataset$Purchased, xlab = "Age", ylab = "Purchased")
curve(predict(model,data.frame(balance = x), type="response"),add=TRUE)
plot(training_set$Age, training_set$Purchased, xlab = "Age", ylab = "Purchased")
curve(predict(model,data.frame(balance = x), type="response"),add=TRUE)
model = glm(Purchased ~ Age, family="binomial", data = training_set)
summary(model)
AIC(model, k=2)
model = glm(Purchased ~ Age, family="binomial", data = training_set)
summary(model)
model = glm(Purchased ~ Age, family="binomial", data = training_set)
summary(model)
AIC(model, k=2)
plot(training_set$Age, training_set$Purchased, xlab = "Age", ylab = "Purchased")
curve(predict(model,data.frame(balance = x), type="response"),add=TRUE)
plot(training_set$Age, training_set$Purchased, xlab = "Age", ylab = "Purchased")
curve(predict(model,data.frame(training_set$Age = x), type="response"),add=TRUE)
curve(predict(model,data.frame(Age = x), type="response"),add=TRUE)
model2 = glm(Purchased ~ Age + EstimatedSalary, data = training_set)
summary(model2)
AIC(model2)
predict(model2,test_set,type='response')
prediction = predict(model2,test_set,type='response')
summary(prediction)
ifelse(prediction < 0.5,0,1)
table(prediction)
table(prediction,test_set$Purchased)
prediction = ifelse(prediction < 0.5,0,1)
table(prediction,test_set$Purchased)
conf = table(prediction,test_set$Purchased)
truepositives = conf[1][1]
truenegatives = conf[2][2]
falsepositives = conf[1][2]
falsenegatives = conf[2][1]
truenegatives
conf[2][2]
conf[1][1]
conf[0][0]
conf[1][2]
conf[1][1]
conf[4][1]
conf[4]
conf[3]
conf[2]
conf[1]
analysis(conf)
analysis = function(conf){
tp = conf[1]
tn = conf[4]
fp = conf[3]
fn = conf[2]
return (list((tp+tn)/(tp+tn+fn+fp),(tn/(tn+fp)),tp/(tp+fn),tp/(tp+fp)))
}
analysis(conf)
install.packages('ROCR')
prediction(conf)
library(ROCR)
prediction(conf)
prediction(prediction,test_set$Purchased)
pred_ROCR = prediction(prediction,test_set$Purchased)
roc_ROCR = performance(pred_ROCR,measure = "auc")
auc = performance(pred_ROCR,measure = "auc")
auc
auc@y.values[[1]]
plot(auc)
auc = performance(pred_ROCR,measure = "auc")
plot(auc)
pred_ROCR = prediction(prediction,test_set$Purchased)
auc = performance(pred_ROCR,measure = "auc")
plot(auc)
auc = performance(pred_ROCR,measure = "tpr")
plot(auc)
auc = performance(pred_ROCR)
auc = performance(pred_ROCR,measure = "auc")
plot(auc)
auc = performance(pred_ROCR,measure = "tpr",x.measure = "fpr")
plot(auc)
pred_ROCR = prediction(prediction,test_set$Purchased)
auc = performance(pred_ROCR,measure = "tpr",x.measure = "fpr")
plot(auc)
plot(auc, main="ROC Curve")
auc@y.values[[1]]
pred_ROCR = prediction(prediction,test_set$Purchased)
auc = performance(pred_ROCR,measure = "tpr",x.measure = "fpr")
plot(auc, main="ROC Curve")
auc@y.values[[1]]
abline(0,1,lty=3 )
perf_auc = performance(pred_ROCR, measure = "auc")
plot(perf, main="ROC Curve")
#auc@y.values[[1]]
abline(0,1,lty=3 )
perf_auc
perf_auc@y.values[[1]]
prediction = predict(model2,test_set,type='response')
pred_ROCR = prediction(prediction,test_set$Purchased)
perf = performance(pred_ROCR,measure = "tpr",x.measure = "fpr")
perf_auc = performance(pred_ROCR, measure = "auc")
plot(perf, main="ROC Curve")
#auc@y.values[[1]]
abline(0,1,lty=3 )
perf_auc@y.values[[1]]
# 19.
prediction = predict(model,test_set,type='response')
pred_ROCR = prediction(prediction,test_set$Purchased)
perf = performance(pred_ROCR,measure = "tpr",x.measure = "fpr")
perf_auc = performance(pred_ROCR, measure = "auc")
plot(perf, main="ROC Curve")
abline(0,1,lty=3 )
perf_auc@y.values[[1]]
plot(perf, main="ROC Curve")
abline(0,1,lty=3 )
perf_auc@y.values[[1]]
# 19.
prediction = predict(model,test_set,type='response')
pred_ROCR = prediction(prediction,test_set$Purchased)
perf = performance(pred_ROCR,measure = "tpr",x.measure = "fpr")
perf_auc = performance(pred_ROCR, measure = "auc")
hold on
plot(perf, main="ROC Curve")
plot(perf, main="ROC Curve")
abline(0,1,lty=3 )
perf_auc@y.values[[1]]
# 19.
prediction = predict(model,test_set,type='response')
pred_ROCR = prediction(prediction,test_set$Purchased)
perf = performance(pred_ROCR,measure = "tpr",x.measure = "fpr")
perf_auc = performance(pred_ROCR, measure = "auc")
lines(perf, main="ROC Curve")
plot(perf, main="ROC Curve")
abline(0,1,lty=3 )
perf_auc@y.values[[1]]
# 19.
prediction = predict(model,test_set,type='response')
pred_ROCR = prediction(prediction,test_set$Purchased)
perf = performance(pred_ROCR,measure = "tpr",x.measure = "fpr")
perf_auc = performance(pred_ROCR, measure = "auc")
points(perf, main="ROC Curve")
perf_auc@y.values[[1]]
perf_auc = performance(pred_ROCR, measure = "auc")
plot(perf, title="ROC Curve")
abline(0,1,lty=3 )
perf_auc@y.values[[1]]
# 19.
prediction = predict(model,test_set,type='response')
pred_ROCR = prediction(prediction,test_set$Purchased)
perf = performance(pred_ROCR,measure = "tpr",x.measure = "fpr")
perf_auc = performance(pred_ROCR, measure = "auc")
points(perf, title="ROC Curve")
perf_auc = performance(pred_ROCR, measure = "auc")
plot(perf, title="ROC Curve")
abline(0,1,lty=3 )
perf_auc@y.values[[1]]
# 19.
prediction = predict(model,test_set,type='response')
pred_ROCR = prediction(prediction,test_set$Purchased)
perf = performance(pred_ROCR,measure = "tpr",x.measure = "fpr")
perf_auc = performance(pred_ROCR, measure = "auc")
points(perf)
lines(perf)
plot(perf, title="ROC Curve")
abline(0,1,lty=3 )
perf_auc@y.values[[1]]
# 19.
prediction = predict(model,test_set,type='response')
pred_ROCR = prediction(prediction,test_set$Purchased)
perf = performance(pred_ROCR,measure = "tpr",x.measure = "fpr")
perf_auc = performance(pred_ROCR, measure = "auc")
par(new=TRUE)
plot(perf)
perf_auc@y.values[[1]]
prediction = predict(model2,test_set,type='response')
pred_ROCR = prediction(prediction,test_set$Purchased)
perf = performance(pred_ROCR,measure = "tpr",x.measure = "fpr")
perf_auc = performance(pred_ROCR, measure = "auc")
plot(perf, title="ROC Curve")
abline(0,1,lty=3 )
perf_auc@y.values[[1]]
# 19.
prediction = predict(model,test_set,type='response')
pred_ROCR = prediction(prediction,test_set$Purchased)
perf = performance(pred_ROCR,measure = "tpr",x.measure = "fpr")
perf_auc = performance(pred_ROCR, measure = "auc")
par(new=TRUE)
plot(perf)
perf_auc@y.values[[1]]
prediction = predict(model2,test_set,type='response')
pred_ROCR = prediction(prediction,test_set$Purchased)
perf = performance(pred_ROCR,measure = "tpr",x.measure = "fpr")
perf_auc = performance(pred_ROCR, measure = "auc")
plot(perf, title="ROC Curve")
abline(0,1,lty=3 )
perf_auc@y.values[[1]]
# 19.
prediction = predict(model,test_set,type='response')
pred_ROCR = prediction(prediction,test_set$Purchased)
perf = performance(pred_ROCR,measure = "tpr",x.measure = "fpr")
perf_auc = performance(pred_ROCR, measure = "auc")
par(new=TRUE)
plot(perf,col='blue')
perf_auc@y.values[[1]]
# We can see that AUC value of model2 is higher than model1 so
prediction = predict(model2,test_set,type='response')
pred_ROCR = prediction(prediction,test_set$Purchased)
perf = performance(pred_ROCR,measure = "tpr",x.measure = "fpr")
perf_auc = performance(pred_ROCR, measure = "auc")
plot(perf, title="ROC Curve",col='red')
abline(0,1,lty=3 )
perf_auc@y.values[[1]]
# 19.
prediction = predict(model,test_set,type='response')
pred_ROCR = prediction(prediction,test_set$Purchased)
perf = performance(pred_ROCR,measure = "tpr",x.measure = "fpr")
perf_auc = performance(pred_ROCR, measure = "auc")
par(new=TRUE)
plot(perf,col='blue')
perf_auc@y.values[[1]]
# We can see that AUC value of model2 is higher than model1 so
# We can see that AUC value of model2 is higher than model1 so
# model2 is better
cor(dataset$Age, dataset$Purchased)
cor(dataset$EstimatedSalary, dataset$Purchased)
